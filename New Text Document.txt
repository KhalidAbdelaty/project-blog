Project: Personal Blog Website
Structure
Criteria	Submission Requirements
CSS Separate From HTML

Portfolio completely separates structure from design/style.
There are no attributes present in the body of the document.
There are no elements in the document.
CSS Imports

There should be at least 3 imported files in the main CSS file, but the student is welcome to break it down even further if that makes it easier for them.

Directories & Files

Files are organized with a directory structure that separates files based on page and functionality.
The main index.html page should be in the directory's root.
All static assets should be placed in a folder called static/ or assets/.
Links

Each page has an intentional user flow with appropriate links as needed.

Tip: The homepage, design system, and blog post all contain links to each other. The Homepage should have fake links, such as "About", "Search", and "Subscribe".

Design
Criteria	Submission Requirements
Custom Design

Custom images, layout, and styling.

Foundations/Building Blocks

Typography: Custom design for typography with at least 3 unique properties for each typography selector 1. Headers (h1 to h3 at minimum) <h1> 2. Paragraph Text <p> a. Bold b. Italic c. Underlined
Links <a>
Quotes
Colors: At least 3 colors are used.
Components

The following are used in the webpage:

Image(s)
Image caption
Buttons
Card
Patterns

The general pattern of the webpage should be as follows:

Blog Homepage
Navbar
Blog Post Card
Card
Image
Buttons
Footer
Blog Post
Header
Author Info
Name
Title
Current Company/School
Short Bio
Avatar
Social Sharing
Twitter
Facebook
LinkedIn
Pages

The following pages should be present:

Blog Homepage
Blog Post
Layout
Criteria	Submission Requirements
Flexbox Based Layout

Uses Flexbox at least once throughout the project to create a component or pattern

Grid Based Layout

Uses CSS Grid at least once throughout the project to create the layout for pages

Responsiveness
Criteria	Submission Requirements
Multi-Device Web Design

Pages are mobile-friendly and display correctly on all display sizes (mobile, tablet, desktop).

Note: You can simulate Mobile Devices with Device Mode in Chrome DevTools(opens in a new tab).

Tip: Ensure that all content:

can be displayed
is legible/readable
does not overlap with other content
does not overflow viewport (content is outside initial view loaded)
Quality
Criteria	Submission Requirements
Valid HTML

HTML5 semantic tags such as <header>, <footer>, <article>, <section> , etc. are used to add meaning to the code.
No div or section selectors are without a CSS class or id.
HTML Formatting Rules

All code is lowercase
The code does not have trailing white spaces.
Indentation is consistent (either all tabs or all 2 spaces or all 4 spaces etc).
Code uses a new line for every block, list or table element and indent every such child element (it is acceptable to put all elements in one line).
When quoting attribute values, code uses consistent quotation marks (single vs. double).
HTML Style Rules

HTML documents HTML5 <!doctype html>
Code omits type attributes for style sheets and scripts.
[Optional] Code does not use entity references unless necessary e.g. characters with special meaning (like < and &) as well as control or “invisible” characters (like no-break spaces).
CSS Formatting Rules

The code does not have trailing white spaces.
Indentation is consistent (either all tabs or all 2 spaces or all 4 spaces etc).
Code indents all content, that is rules within rules as well as declarations to reflect hierarchy and improve understanding.
The code uses a semicolon after every declaration for consistency and extensibility reasons.
Code always uses a space after a property name's colon, but no space between property and colon, for consistency reasons.
Code always uses a single space between the last selector and the opening brace that begins the declaration block. Code always start a new line for each selector and declaration.
Code always put a blank line (two line breaks) between rules.
Code uses consistent quotation marks for attribute selectors or property values (single vs. double).
CSS Style Rules

The code uses meaningful or generic ID and class names that are as short as possible, but as long as necessary.
The code does not use element names in conjunction with IDs or classes.
The code uses shorthand properties where possible.
[Optional] Code omits unit specification after 0 values.
[Optional] Code includes leading 0s in decimal values for readability.
[Optional] Code uses 3-character hexadecimal notation where possible.
[Optional] Code separates words in ID and class names by a hyphen.
Suggestions to Make Your Project Stand Out
Custom Text: You are welcome to use Lorem ipsum or other placeholder text in your blog and blog posts, but putting in real, custom text can make your project look even more impressive!
Pattern - Related Articles: Add 2 to 3 fake blog post references after the blog post ends (i.e. to older blog posts)
Pattern - Subscribe Form: Instead of a fake subscribe link on the blog, there is an actual form area with name and email input fields and a subscribe button.
Project URL: Project is fully deployed on GitHub Pages, Netlify or another hosting provider that is free of charge.
Design System: Consider implementing a design system(opens in a new tab) for your webpage.
Accessibility:
Discernable text
Sufficient color contrast
ARIA attributes
Less than 5 violations found through the Axe(opens in a new tab) (Chrome extension) test on the web page.

______________________

Development Strategy
In this project, you'll write code across a handful of HTML and CSS files. Note that it's very important that you plan your project before you start writing any code! Break your project down into small pieces of work and strategize your approach to each one. With these bite-sized amounts, it'll be easier to debug and fix any issues that appear.

Feel free to implement your own design workflow, but if you get stuck -- here is a brief primer to get you up and running!

Decide on the overall structure of your project. You'll want separate HTML files, and related CSS files, for each piece of the website: the main page, a blog post, and the (optional) design system (feel free to add more!). Note that these should not all fall in the parent directory, but should also be organized into subdirectories.
Draw out some mock pages of the website. Even you aren't confident in your own drawing skills, that's okay - just a quick sketch of the different headers, boxes, etc. can help you think through what you want to do later with the layout.
(Optional) Begin considering your design system. This is really 2a, but doing a first draft of your webpages can help you take the first steps toward the design system. You don't need to build the page out yet, but hopefully drawing these pages has you thinking more in-depth on how everything should look. If you want some ideas, you can also check out Veritas(opens in a new tab), Udacity's design system (yours does not need to be anywhere near as detailed).
Start building out the HTML for the main page. Building out the HTML will allow you to start looking at the basics of what you are building, whether in the browser or in your IDE. Make sure to take a look at the Udacity HTML Style Guide(opens in a new tab) as well from the get-go - it will be easier to follow this throughout than to have to re-format all your code once you've finished. Need a refresher? Head back to the first lesson in this course to refresh your knowledge of HTML structure!
Build the HTML for your example blog post. Now that you've made one HTML page already, you're on a roll! Think about what items you might want on the blog post that weren't present on the main page, and vice versa.
(Optional) Formalize your design system. Now that you have the primary HTML pages built, it's time to formalize your approach to design and styling. Note that you are fully able to iterate on this later, but make sure you keep the design system consistent to what is in your actual CSS coming up. You can make the HTML page for the design system at this time.
Begin styling your pages with CSS. You should have a primary CSS file that is linked to from each of the HTML pages, and then import separate CSS files(opens in a new tab) for each page into this primary CSS file. Be sure to take a look at the Udacity CSS Style Guide(opens in a new tab), and if you are using an (optional) design system, make sure you are staying true to it (or update it accordingly). Note that you need to use both Flexbox and Grid per the project rubric(opens in a new tab) as part of your CSS.
Take a look back at your initial drawings, and iterate. Is the page coming together as you initially planned? It's perfectly fine to have decided to go a different direction than you drew out, but this is a good chance to see if you are missing something you wanted on the page. From there, iterate, iterate, iterate, until each page looks how you want it to look.
Link between pages. If your project structure is set up correctly and you add the appropriate links within your HTML, a user should be able to click on those links to go between the main page, an example blog post, and the (optional) design system without issue. Note that it is fine to have certain links, like "Subscribe", be fake links.
Test and more iteration. Finally, just make sure you have tested out that everything on each page is working and looks as you want it to look. Take another look at the project rubric(opens in a new tab) to double-check you have covered each item, and if you want, try to implement some of the ways to stand out at the end of the rubric. Deploying to Github Pages(opens in a new tab), for instance, is a good way to get your project up live where you can check it out on multiple devices, and even show your friends and family your work.
Version Control
Although not a requirement, we recommend using Git from the very beginning. Make sure to commit often and to use well-formatted commit messages that conform to our Git Style Guide(opens in a new tab).

Udacity Style Guides
You should write your code and markup to meet the specifications provided in these style guides:

CSS Style Guide(opens in a new tab)
HTML Style Guide(opens in a new tab)
Git Style Guide(opens in a new tab)
Make sure to check the project rubric(opens in a new tab) for specific requirements.

_________________

